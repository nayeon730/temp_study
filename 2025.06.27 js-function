01_funcion-definition

/* 01_함수 선언문 */

function hello(name) {
    return `${name}님 안녕하세요.`;
}

console.log(hello('홍길동'));

/* 
    자바스크립트 엔진은 생성된 함수를 호출하기 위해
    함수 이름과 동일한 식별자를 암묵적으로 생성하고,
    거기에 함수 객체를 할당한다.
    즉, 함수는 함수 이름으로 호출하는 것이 아니라
    함수 객체를 가리키는 식별자로 호출하는 것이다.
*/

--------------------------------------------------------------------

02_function-expresstion

/* 02_ 함수 표현식 */

var hello = function hello(name) {      // 함수 이름 생략 가능하다.
    return `${name}님 안녕하세요!`;
}

console.log(hello('홍길동'));

// 함수 표현식에서 함수명을 생략하지 않아도 문제는 없다.
var calc = function add(a, b) {
    return a + b;
}

// 단, 함수 호출은 식별자로 이루어진다.
console.log(calc(10, 20));

--------------------------------------------------------------------

03_function-hoisting

/* 03_함수 호이스팅 */

console.group(hello);

function hello(name) {
    return `${name}님 안녕하세요!`;
} // 위로 끌어올려짐

var hi = function(name) {
    return `${name} 안녕!`;
}

/* 중요 ***
    함수 선언문은 런타임 이전 자바스크립트 엔진에 의해 먼저 실행된다.
    따라서 함수 선언문 이전에 함수를 참조할 수 있으며, 호출할 수도 있다.
    함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는
    자바스크립트 고유의 특징을 함수 호이스팅이라고 한다.

    변수 할당문의 값이 할당문이 실행되는 시점,
    런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수가 된다.
    함수 표현식으로 정의한 함수는 반드시 함수 표현식 이후에 참조 또는 호출해야 한다.
*/

--------------------------------------------------------------------

01_parameter-and-argrument

/* 01_매개변수와 인수 */
//   = 파라미터 = 전달인자,인자,인수,아규먼트

function hello(name) {

    // 매개변수는 함수 몸체 내부에서만 참조할 수 있다.
    return `${name}님 안녕하세요!`;
}

// console.log(name); 불가능

var result = hello('홍길동');
console.log(result);

// 인수가 부족해서 할당되지 않은 매개변수의 값은 undefined이다.
result = hello();
console.log(result);

// 인수가 더 많은 경우 초과된 인수는 무시된다.
result = hello('홍길동', '유관순');
console.log(result);

function hi(name = '이름') {
    return `${name} 안녕`;
}

//매개변수 기본값 활용
result = hi();
console.log(result);

--------------------------------------------------------------------

02_return

/* 02_반환문 */

function hello(name) {
    // 반환문
    return `${name}님 안녕하세요!`;
    // 반환문 이후의 문은 실행되지 않고 무시된다.
    console.log(name);
}
// 반환문은 리턴 키워드 뒤에 오는 값을 반환한다.
console.log(hello('유관순'));

function test() {

    console.log('함수 호출 확인');
    // 반환 값을 명시적으로 지정하지 않으면 undefined가 반환된다.
    return;
    // 또는 반환문을 생략할 수도 있다. 이때도 암묵적으로 indefined를 반환한다.
}

console.log(test());

--------------------------------------------------------------------

01_arrow-function

/* 03_ 화살표 함수 */

var message;

// 기존 함수 정의
message = function() {
    return 'hello world';
}

console.log(message());

// function 생략 가능
message = () => {
    return 'Arrow Function!';
}

// 명령문이 하나만 있을 경우 중괄호, return 생략 가능
message = () => "Arrow Function!";

console.log(message());

message = (val1, val2) => `Arrow Function : ${val1 + val2}`;

console.log(message(10,20));

// 매개변수 하나면 소괄호 생략 가능
message = value => `hello${value}`;
console.log(message('world'));

--------------------------------------------------------------------

01_immediately-invoked-functions

/* 01_ 즉시 실행 함수 */

// 함수 이름이 없는 익명 함수를 사용하는 것이 일반적이다.
(function() {
    console.log('익명 즉시 실행 함수, 함수 정의와 동시에 호출!');
})();

// 함수 이름으로 작성할 수도 있지만 해당 이름으로 다시 호출할 수 없다.
(function hello(name) {
    console.log(`${name}님 안녕하세요`);
}) ('홍길동');

// hello('홍길동');

--------------------------------------------------------------------

02_recursive-function

/* 02_재귀함수 */

// 5! = 1*2*3*4*5;
// n! = 1*2*3*4*(n-1) *n;

function factorial(n) {
    if(n<=1)
        return 1;   // n이 1 이하이면 재귀호출 멈춘다.

    return n * factorial(n - 1);
}

console.log(factorial(1));
console.log(factorial(2));
console.log(factorial(3));
console.log(factorial(4));
console.log(factorial(5));

/* 
    재귀함수는 반복되는 처리를 반복문 없이 구현할 수 있다는 장점이 있지만
    무한 반복에 빠질 위험이 있고 이로 인해 스택 오버플로우 에러를 발생시킬 수 있으므로
    반복문보다 재귀 함수 사용이 더 직관적으로 이해하기 쉬울 때만
    한정적으로 사용하는 것이 바람직하다.
*/

--------------------------------------------------------------------

03_nested-function

/* 03_중첩 함수 
    함수 내부에 정의된 함수를 중첩 함수 또는 내부 함수라고 한다.
    중첩 함수를 포함하는 함수는 외부 함수라고 한다.
*/

function outer() {
    
    var outerVal = '외부 함수';

    function inner() {

        var innerVal = '내부 함수';
        console.log(innerVal, outerVal);
    }

    inner(); // 이너 호출문
}

outer(); // 아우터 호출문

// 이너가 끝나는 지점에 이너 호출문
// 이너는 아우터 안에 있기 때문에 아우터호출문도 있어야함 (밖에)


--------------------------------------------------------------------

04_callback-function

/* 04_콜백 함수 */
/* 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 콜백 함수라고 한다.
    매개변수를 통해 함수의 외부에서 콜백 함수를 전달 받은 함수를 고차 함수라고 한다.
    콜백 함수는 고차 함수에 전달되어 헬퍼 함수의 역할을 한다.
*/

// 전달 받은 값을 증가시켜주는 함수
function increase(value) {
    return value + 1;
}

function decrease(value){
    return value - 1;
}

// 전달 받은 함수에 전달 받은 값을 적용시켜주는 고차 함수
function apply(func, value) {
    return func(value);
}

// 고차 함수로 콜백 함수를 전달하며 호출
console.log(apply(increase, 5));
console.log(apply(decrease, 5));

console.log(apply(function(value) {return value ** 2;}, 5))

--------------------------------------------------------------------
