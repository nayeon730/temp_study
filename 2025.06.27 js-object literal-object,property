01_object

/* 01_object_객체 */
/* 자바스크립트는 객체 기반 프로그래밍 언어 원시 값을 제외한 나머지 값은 모두 객체 타입이다.
    프로퍼티로 구성된 집합이며, 프로퍼티는 키(key)와 값(value)으로 구성된다.
    자바스크립트에서 사용할 수 있는 모든 갑은 프로퍼티 값이 될 수 있다.
    프로퍼티 값이 함수일 경우 method라고 부른다.
*/

/* 객체 생성 방법
    자바, C++ 같은 클래스 기반 객체 지향 언어는 클래스를 사전에 정의하고 필요한 시점에 new 연산자와 함께 생성자를 호출하여
    인스턴스(객체)를 생성하는 방식으로 객체를 생성한다.
    자바스크립트는 프로토타입 기반 객체지향 언어로 클래스 기반 객체 지향 언어와는 달리 다양한 객체 생성 방법을 지원한다.
    1. 객체 리터럴 ({})
    2. object 생성자 함수
    3. 생성자 함수
    4. object.create 메소드
    5. class(ES6)
    이 중 가장 일반전이고 간단한 방법이 객체 리터럴을 사용하는 방법이다.
    중괄호 내 0개 이상의 프로퍼티를 정의한다.
 */

var student = {
    
    // 프로퍼티 : 객체의 상태를 나타내는 값(data)
    name : '유관순',
    age : 16,
    // 메서드 : 프로퍼티 (상태 데이터)를 참조하고 조작할 수 있는 동작
    getinfo : function() {
        return `${this.name}(은)는 ${this.age}세입니다.`;
    }
};

console.log(typeof student);    // object
console.log(student);    // { name: '유관순', age: 16, getinfo: [Function: getinfo] }
console.table(student);     // 표 형식


// 프로퍼티를 정의하지 않을 시 빈 객체가 생성된다.
var student2 ={};
console.log(typeof student2); // object
console.log(student2); // {}

/*
    객체 리터럴의 중괄호는 코드 블록을 의미하지 않는다. 따라서 닫는 중괄호 뒤에는 세미콜론을 붙인다.
    숫자 값이나 문자열을 만드는 것과 유사하게 리터럴로 객체를 생성한다.
    객체 리터럴에 프로퍼티를 포함시켜 객체를 생성함과 동시에 프로퍼티를 만들 수도 있고,
    객체를 생성한 이후에 프로퍼티를 동적으로 추가할 수도 있다.
 */

--------------------------------------------------------------------------

01_property
/* 01_프로퍼티 */
/* 객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성된다. */

var student = {

    name : '유관순',
    age : 20
    // 프로퍼티의 나열은 쉼표로 구분하며, 마지막 프로퍼티 뒤에 쉼표를 사용해도 된다.
}

// 정수부터 나열됨
var obj = {
    normal : 'normal value',
    '@ s p a c e @' : 'space value',
    '' : '',    // 빈 문자열 키는 오류 발생하지 않지만, 논리적으로 문제가 생길 수 있어서 권장하지 않는다.
    0 : 1,  // 숫자 키는 내부적으로 문자열로 변환된다.
    var : 'var', // 예약어 키는 오류 발생하지는 않지만 권장하지 않는다.
    normal : 'new value' // 이미 존재하는 키를 중복 선언하면 나중에 선언한 프로퍼티로 덮어쓴다.
};

var key = 'test';
obj[key] = 'test value';

console.log(obj);

/* 
    프로퍼티 키 : 빈 문자열을 포함하는 모든 문자열 -> 프로퍼티 값에 접근하기 위한 식별자
    프로퍼티 값 : 자바스크립트에서 사용할 수 있는 모든 값
*/

--------------------------------------------------------------------------

02_method
/* 02_method
    자바스크립트의 함수는 객체이다.
    함수는 값으로 취급할 수도 있고, 프로퍼티 값으로 사용할 수 있다.
*/

var dog = {
    name : '뽀삐',
    eat : function(food) {
            // 내부 프로퍼티 접근할 때 this를 붙여야한다.
        console.log(`${this.name}(은)는 ${food}를 맛있게 먹어요`);
    }
};

dog.eat('고구마'); // <-- () 전달인자

--------------------------------------------------------------------------

03_property-accesssor

/* 03_프로퍼티 접근 */

var dog = {
    name : '뽀삐',
    eat : function(food) {
        console.log(`${this.name}는(은) ${food}를 맛있게 먹어요.`);
    }
};

// 마침표 표기법(.으로 접근)
console.log(dog.name);
dog.eat('고구마');

// 대괄호 표기법 - 프로퍼티 키는 반드시 따옴표로 감싼 문자열 사용한다.
console.log(dog['name']);
dog['eat']('고구마');


var obj = {
    'dash-key' : 'dash-value',
    0 : 1
};

// 프로퍼티 키가 식별자 네이밍 규칙을 준수하지 않는 이름일 경우 반드시 대괄호 표기법을 사용한다.
// console.log(obj.dash-key);
// console.log(obj.'dash-key');
console.log(obj['dash-key']);

console.log(obj[0]);
console.log(obj['0']);

--------------------------------------------------------------------------

04_property-change-add-remove

/* 04_프로퍼티 값 변경, 추가, 삭제 */

var dog = {
    name : '뽀삐'
};

// 이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신된다.
dog.name = '두부';
dog['name'] = '두부';
console.log(dog);

// 프로퍼티 동적 추가 : 존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성되어 추가되고 값이 할당된다.
dog.age= 3;
dog['age'] = 3;
console.log(dog);

// 프로퍼티 삭제
// delete 연산자는 객체의 프로퍼티를 삭제한다.
// 만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다.
delete dog.age;
delete dog['age'];
delete dog.something;
console.log(dog);

--------------------------------------------------------------------------
