
01_number

/* data-type은 값의 종류를 말하며 자바스크립트는 7개의 데이터 타입을 제공한다. */

/* 
    01. 숫자 타입
    자바의 경우 정수와 실수를 구분해 int, long, float, double 등과 같은 다양한 숫자 타입을 제공한다.
    하지만 자바스크립트의 경우 하나의 숫자 타입만 존재하고, 모든 수를 실수로 처리한다.
*/ 

var integer = 10; //정수
var double = 5.5; // 실수
var negetive = -10; // 응수

console.log(integer); //어떤 값이 들어있는지 확인하는 용도 : ctrl+alt+N

console.log(10 === 10.0); //=== : 같은거면서 타입까지 같은지 확인하는 연산자 / 숫자 타입은 모두 실수로 처리되므로 같다.

console.log(10 / 4); //실수끼리의나누기이므로 소수점까지 처리된다.

/* RAM 공간 중 steak에 'integer 10'처럼 남음 */

/* 
    숫자 타입은 추가적으로 세 가지 특별한 값도 표현할 수 있다.
    Infinity : 양의 무한대
    -Infinity : 음의 무한대
    NaN : 산술 연산 불가(Not a Number)
*/

console.log(10 / 0); //오류가 나지 않도록 Infinity값을 줌
console.log(10 / -0); // `` -Infinity
console.log(1 * '문자열'); //연산 불가로 NaN으로 표기됨

-------------------------------------------------------------------------------------------------------------

02_string
/* 
    02. 문자열 타입
    문자열은 작은 따옴표(''), 큰따옴표(""), 또는 백틱(``)으로 텍스트를 감싼다.
    자바는 문자열을 객체로 표현하지만 자바스크립트의 문자열은 원시 타입(기본적으로 제공하는 타입)이며, 변경 불가능한 값이다.
 */

    var string; // string이라는 변수만 선언만 한 것
    string = 'javastript';
    string = "javascript";
    string = `javascript`;

    // 일반 문자열 내에서는 줄바꿈이 허용되지 않는다.
    // var str = '안녕하세요.
    // 반갑습니다';

    // 이스케이프 시퀀스를 사용해야 한다.
    var str = '안녕하세요\n반갑습니다.'; // '\n' = 개행
    console.log(str);

    // 백틱을 사용하면 줄바꿈이 허용되고, 모든 공백이 있는 그대로 적용된다.
    var multiline = `안녕하세요.
    반갑습니다`;
    console.log(multiline);

    var lastname = '홍'
    var firstname = '길동'

    // 문자열은 문자열 연산자 +를 사용해 연결할 수 있다.
    console.log('제 이름은' + lastname + firstname + '입니다.');
/*
    템플릿 리터럴
    ES6부터 도입된 멀티라인 문자열, 표현식 삽입 등의 편리한 문자열 처리 기능을 제공하는 문자열 표기법이다.
    이 때는 작은 따옴표, 큰 따옴표 대신 백틱을 사용해 표현한다.
 */

    // 표현식 삽입을 이용하면 문자열 연산자보다 가독성이 좋고 간편하게 문자열을 조합할 수 있다.  ``백틱 + ${}
    console.log(`제 이름은${lastname}${firstname}입니다.`);
    console.log('제 이름은${lastname}${firstname}입니다.');

-------------------------------------------------------------------------------------------------------------

03_boolean
/* 03. 불리언 타입
불리언 타입의 값은 논리적 참, 거짓을 나타내는 true와 foalse뿐이다.
*/

var flag = true;
console.lof(flag);
falg = false;
console.log(flag);

-------------------------------------------------------------------------------------------------------------

04_undefined-and-null

/* 04_undefiend and null */

/* 
    undefined 타입 값은 undefined가 유일하다.
    var 키워드로 선언한 변수는 암묵적으로 undefined로 초기화 되므로
    변수를 선언한 이후 값을 할당하지 않은 변수를 참조하면 undefined가 변환된다.
    undefined는 자바스크립트 엔진이 변수를 초기화 할 때 사용하는 값이므로
    개발자가 의도적으로 변수를 할당하는 것은 본래 취지와 어긋나고 혼란을 줄 수 있으므로 지양한다.
 */

var undef;
console.log(undef);

/* 
    null 타입의 값은 null이 유일하다.
    변수에 값이 없다는 것을 의도적으로 명시할 때 사용한다. 
*/

var nullval = 'something';
nullval = null; // 이전 참조를 제거하여 더 이상 'something'을 참조하지 않는다.
console.log(nullval);

-------------------------------------------------------------------------------------------------------------

05_symbol-and-object

/* 05_symbol-and-object */

/*
    symbol 타입
    ES6에서 추가된 7번째 타입으로, 변경 불가능한 원시 타입의 값이다.
    다른 값과 중복되지 않는 값으로 이름 충돌할 위험이 없는 객체의 유일한 프로퍼티 키를 만들기 위해 사용한다.
*/

// 심벌 값 생성
var key = Symbol('key');
console.log(typeof key);

// 객체 생성
var obj = {};

// 이름이 충돌할 위험이 없게 심벌을 프로퍼티 키로 사용한다.
obj[key] = 'value';
console.log(obj[key]);

/*
    자바스크립트의 데이터 타입은 크게 원시 타입과 객체 타입으로 분류한다.
    자바스크립트는 객체 기반의 언이며, 자바스크립트를 이루고 있는 것의 모든 것이 객체이다.
    number, string, boolean, undefined, null, symbol 6가지의 데이터 타입 이외의 값은 모두 객체 타입이다.
*/

-------------------------------------------------------------------------------------------------------------
